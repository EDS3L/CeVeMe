import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'pl'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly   'com.mysql:mysql-connector-j'

	implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.23'
	implementation 'io.jsonwebtoken:jjwt:0.12.6'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.jsoup:jsoup:1.20.1'
	implementation 'org.apache.httpcomponents.client5:httpclient5:5.5'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation("com.google.genai:google-genai:1.0.0")
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito:mockito-core:5.18.0'
	testRuntimeOnly    'org.junit.platform:junit-platform-launcher'
	testImplementation("org.assertj:assertj-core:3.27.3")
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()

	def mockitoJar = configurations.testRuntimeClasspath.find { it.name.startsWith('mockito-core') }
	if (mockitoJar) {
		jvmArgs "-javaagent:${mockitoJar.absolutePath}"
	}

	testLogging {
		events("passed", "failed", "skipped", "standardOut", "standardError")
		exceptionFormat = TestExceptionFormat.FULL
		showStandardStreams = true
	}

}
